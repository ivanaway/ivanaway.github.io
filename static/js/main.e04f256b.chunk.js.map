{"version":3,"sources":["components/TopBar.js","components/Graph.js","components/DataDisplay.js","App.js","serviceWorker.js","index.js"],"names":["TopBar","props","txt","stateName","className","Graph","message","data","labelsCases","dataPointsCases","labelsDeaths","dataPointsDeaths","t","i","length","push","date","month","day","total","death","totalSimilarQuotient","prevQuotient","state","graphData","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","options","responsive","maintainAspectRatio","scales","yAxes","display","gridLines","color","ticks","beginAtZero","xAxes","class","height","textAlign","width","this","React","Component","DataDisplay","positiveIncrease","year","positives","deathIncrease","App","setData","bind","handleSubmit","console","log","setState","fetch","resp","json","toString","substring","substr","event","target","children","value","fetchDataForState","preventDefault","onSubmit","type","onChange","handleChange","toUpperCase","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.e04f256b.chunk.js","sourcesContent":["import React from 'react'\r\nimport './TopBar.css'\r\n\r\nfunction TopBar(props) {\r\n    let txt\r\n    if (props.stateName == '') txt = ''\r\n    else txt = `: ${props.stateName}`\r\n    return (\r\n        <div className=\"TopBar\">\r\n            COVID Tracker{txt}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TopBar","import React from 'react'\r\nimport './Graph.css'\r\nimport {Line} from 'react-chartjs-2';\r\n\r\nclass Graph extends React.Component {\r\n    constructor(props) {\r\n        super()\r\n        let data = props.data,\r\n        labelsCases = [],\r\n        dataPointsCases = [],\r\n        labelsDeaths = [],\r\n        dataPointsDeaths = [],\r\n        t = []\r\n        for (let i = 0; i < data.length; i++) {\r\n            labelsCases.push(`${data[data.length - 1 - i].date.month}/${data[data.length - 1 - i].date.day}`)\r\n            dataPointsCases.push(data[data.length - 1 - i].total)\r\n            labelsDeaths.push(`${data[data.length - 1 - i].date.month}/${data[data.length - 1 - i].date.day}`)\r\n            dataPointsDeaths.push(data[data.length - 1 - i].death)\r\n            t.push(data[i].total)\r\n        }\r\n        let message\r\n        let threshSimilarQuotient = 0\r\n        let threshProportionSimilarQuotient = 0.45\r\n        let totalSimilarQuotient = 0\r\n        let numSteps = 20\r\n        let prevQuotient = t[0] / t[1]\r\n        for (let i = 1; i < numSteps; i++) {\r\n            let newQuotient = t[i] / t[i+1]\r\n            if (prevQuotient > (newQuotient + threshSimilarQuotient)) totalSimilarQuotient++\r\n            prevQuotient = (t[i] / t[i+1])\r\n        }\r\n        if (totalSimilarQuotient / numSteps > threshProportionSimilarQuotient) {\r\n            message = 'STAY INSIDE - PROTECT YOUR FAMILY AND COMMUNITY. CASES ARE GROWING EXPONENTIALLY.'\r\n        } else {\r\n            message = 'CASES ARE NOT GROWING EXPONENTIALLY. IT MAY BE SAFE TO GO OUTSIDE FOR NECESSARY ACTIVITIES.'\r\n        }\r\n        this.state = {\r\n            message: message,\r\n            graphData: {\r\n                labels: labelsCases,\r\n                datasets: [\r\n                    {\r\n                        label: 'Cases over time',\r\n                        fill: false,\r\n                        lineTension: 0.1,\r\n                        backgroundColor: 'rgba(0, 0, 0, 1)',\r\n                        borderColor: 'rgba(75,192,192,1)',\r\n                        borderCapStyle: 'butt',\r\n                        borderDash: [],\r\n                        borderDashOffset: 0.0,\r\n                        borderJoinStyle: 'miter',\r\n                        pointBorderColor: 'rgba(75,192,192,1)',\r\n                        pointBackgroundColor: '#fff',\r\n                        pointBorderWidth: 1,\r\n                        pointHoverRadius: 5,\r\n                        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n                        pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n                        pointHoverBorderWidth: 2,\r\n                        pointRadius: 1,\r\n                        pointHitRadius: 10,\r\n                        data: dataPointsCases\r\n                    },\r\n                    {\r\n                        label: 'Deaths over time',\r\n                        fill: false,\r\n                        lineTension: 0.1,\r\n                        backgroundColor: 'red',\r\n                        borderColor: 'red',\r\n                        borderCapStyle: 'butt',\r\n                        borderDash: [],\r\n                        borderDashOffset: 0.0,\r\n                        borderJoinStyle: 'miter',\r\n                        pointBorderColor: 'red',\r\n                        pointBackgroundColor: '#fff',\r\n                        pointBorderWidth: 1,\r\n                        pointHoverRadius: 5,\r\n                        pointHoverBackgroundColor: 'red',\r\n                        pointHoverBorderColor: 'dark-red',\r\n                        pointHoverBorderWidth: 2,\r\n                        pointRadius: 1,\r\n                        pointHitRadius: 10,\r\n                        data: dataPointsDeaths\r\n                    }\r\n                ],\r\n                options: {\r\n                    responsive: true,\r\n                    maintainAspectRatio: false,\r\n                    scales: {\r\n                        yAxes: [{\r\n                            display: true,\r\n                            gridLines: {\r\n                                display: false ,\r\n                                color: \"#ff0000\"\r\n                            },\r\n                            ticks: {\r\n                                beginAtZero: true\r\n                            }\r\n                        }],\r\n                        xAxes: [{\r\n                            display: true,\r\n                            gridLines: {\r\n                                color: \"#FFFFFF\"\r\n                            }\r\n                        }]\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div class={{\r\n                height: '50%',\r\n                textAlign: 'center',\r\n                width: '50%'\r\n            }}>\r\n                <p>{this.state.message}</p>\r\n                <div class=\"Graph\"><Line data={this.state.graphData} /></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Graph","import React from 'react'\r\nimport rd3 from 'react-d3-library'\r\n\r\nexport default class DataDisplay extends React.Component {\r\n    constructor(props) {\r\n        super()\r\n        this.state = {\r\n            data: props.data\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"DataDisplay\">\r\n                <div className=\"DataDisplayCell\">\r\n                    <h2>New cases today: {`${this.state.data[0].positiveIncrease} (${this.state.data[0].date.month}/${this.state.data[0].date.day}/${this.state.data[0].date.year}`})</h2>\r\n                    <h1>{this.state.data[0].positives}</h1>\r\n                </div>\r\n                <div className=\"DataDisplayCell\">\r\n                    <h2>New deaths today: {`${this.state.data[0].deathIncrease} (${this.state.data[0].date.month}/${this.state.data[0].date.day}/${this.state.data[0].date.year}`})</h2>\r\n                    <h1>{this.state.data[0].positives}</h1>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport Spinner from 'react-bootstrap/Spinner'\r\n\r\nimport './App.css'\r\nimport TopBar from './components/TopBar.js'\r\nimport Graph from './components/Graph.js'\r\nimport DataDisplay from './components/DataDisplay'\r\n\r\n\r\nclass App extends React.Component {\r\n  // Get location?\r\n  // let location = getLocation()\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      data: null,\r\n      stateName: null\r\n    }\r\n    this.setData = this.setData.bind(this)\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  setData(data) {\r\n    console.log(data)\r\n    this.setState({data: data})\r\n  }\r\n\r\n  async fetchDataForState( /** e.g. ca, tx, ny */ stateName) {\r\n    let resp = await fetch('https://covidtracking.com/api/v1/states/' + stateName + '/daily.json')\r\n    let data = await resp.json()\r\n    for (let i = 0; i < data.length; i++) {\r\n      let date = data[i].date.toString()\r\n      // date = 20200627\r\n      data[i].date = {\r\n          year: date.substring(0, 4),\r\n          month: date.substring(4, 6),\r\n          day: date.substr(6, 8)\r\n      }\r\n    }\r\n    this.setState({\r\n      data: data,\r\n      stateName: this.state.stateName\r\n    }) // {[0: {stuff about day 0}, 1: {stuff about day 1}]}\r\n  }\r\n\r\n\r\n  handleSubmit(event) {\r\n    this.setState({\r\n      data: this.state.data,\r\n      stateName: event.target.children[0].children[0].value\r\n    })\r\n    this.fetchDataForState(event.target.children[0].children[0].value)\r\n    event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    if (this.state.data == null) {\r\n      return (\r\n        <div className=\"App\">\r\n          <TopBar stateName=\"\"/>\r\n          <form onSubmit={this.handleSubmit}>\r\n            <label>\r\n              State:\r\n              <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\r\n            </label>\r\n            <input type=\"submit\" value=\"Submit\" />\r\n          </form>\r\n        </div>\r\n      )\r\n    } else {\r\n      return (\r\n        <div className=\"App\">\r\n          <TopBar stateName={this.state.stateName.toUpperCase()}/>\r\n          \r\n          <DataDisplay data={this.state.data}/>\r\n          <Graph data={this.state.data}/>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n}\r\nclass NameForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {value: ''};\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({value: event.target.value});\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    alert('A name was submitted: ' + this.state.value);\r\n    event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <label>\r\n          State:\r\n          <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\r\n        </label>\r\n        <input type=\"submit\" value=\"Submit\" />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}